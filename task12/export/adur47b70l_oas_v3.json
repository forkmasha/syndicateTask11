{
  "openapi": "3.0.1",
  "info": {
    "title": "task12_api",
    "version": "2025-03-26T08:44:49Z"
  },
  "servers": [
    {
      "url": "https://adur47b70l.execute-api.eu-west-1.amazonaws.com/{basePath}",
      "variables": {
        "basePath": {
          "default": "api"
        }
      }
    }
  ],
  "paths": {
    "/signup": {
      "post": {
        "summary": "User Sign-up",
        "description": "Registers a new user by creating a user account in Cognito using the provided email as username and confirming the sign-up.",
        "requestBody": {
          "description": "Signup request payload containing firstName, lastName, email and password.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User signed up successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignupResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or sign-up failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server or configuration error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:423623856894:function:api_handler/invocations",
          "passthroughBehavior": "when_no_match",
          "type": "aws_proxy"
        }
      },
      "options": {
        "summary": "CORS support for /signup",
        "responses": {
          "200": {
            "description": "CORS support",
            "headers": {
              "Access-Control-Allow-Origin": { "schema": { "type": "string" } },
              "Access-Control-Allow-Methods": {
                "schema": { "type": "string" }
              },
              "Access-Control-Allow-Headers": { "schema": { "type": "string" } }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "mock",
          "requestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          },
          "passthroughBehavior": "when_no_match",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          }
        }
      }
    },
    "/signin": {
      "post": {
        "summary": "User Sign-in",
        "description": "Authenticates a user with email and password and returns an idToken for subsequent requests.",
        "requestBody": {
          "description": "Signin request payload containing email and password.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigninRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authentication successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigninResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid credentials or request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server or configuration error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:423623856894:function:api_handler/invocations",
          "passthroughBehavior": "when_no_match",
          "type": "aws_proxy"
        }
      },
      "options": {
        "summary": "CORS support for /signin",
        "responses": {
          "200": {
            "description": "CORS support",
            "headers": {
              "Access-Control-Allow-Origin": { "schema": { "type": "string" } },
              "Access-Control-Allow-Methods": {
                "schema": { "type": "string" }
              },
              "Access-Control-Allow-Headers": { "schema": { "type": "string" } }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "mock",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "requestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          },
          "passthroughBehavior": "when_no_match"
        }
      }
    },
    "/tables": {
      "get": {
        "summary": "List Tables",
        "description": "Retrieves a list of all tables with details including id, table number, seating capacity, VIP status and optional minimum order.",
        "responses": {
          "200": {
            "description": "List of tables.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TablesResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "security": [{ "authorizer": [] }],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:423623856894:function:api_handler/invocations",
          "passthroughBehavior": "when_no_match",
          "type": "aws_proxy"
        }
      },
      "post": {
        "summary": "Add Table",
        "description": "Creates a new table record and returns the id of the newly created table.",
        "requestBody": {
          "description": "Payload with table details.",
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateTableRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Table created successfully.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CreateTableResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid table data or request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "security": [{ "authorizer": [] }],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:423623856894:function:api_handler/invocations",
          "passthroughBehavior": "when_no_match",
          "type": "aws_proxy"
        }
      },
      "options": {
        "summary": "CORS support for /tables",
        "responses": {
          "200": {
            "description": "CORS support.",
            "headers": {
              "Access-Control-Allow-Origin": { "schema": { "type": "string" } },
              "Access-Control-Allow-Methods": {
                "schema": { "type": "string" }
              },
              "Access-Control-Allow-Headers": { "schema": { "type": "string" } }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "mock",
          "requestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          },
          "passthroughBehavior": "when_no_match",
          "responses": {
            "default": { "statusCode": "200" }
          }
        }
      }
    },
    "/tables/{tableId}": {
      "get": {
        "summary": "Get Table by ID",
        "description": "Retrieves detailed information for a specific table by its ID.",
        "parameters": [
          {
            "name": "tableId",
            "in": "path",
            "description": "The ID of the table",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "responses": {
          "200": {
            "description": "Table details.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Table" }
              }
            }
          },
          "400": {
            "description": "Table not found or invalid request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "security": [{ "authorizer": [] }],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:423623856894:function:api_handler/invocations",
          "passthroughBehavior": "when_no_match",
          "type": "aws_proxy"
        }
      },
      "options": {
        "summary": "CORS support for /tables/{tableId}",
        "responses": {
          "200": {
            "description": "CORS support.",
            "headers": {
              "Access-Control-Allow-Origin": { "schema": { "type": "string" } },
              "Access-Control-Allow-Methods": {
                "schema": { "type": "string" }
              },
              "Access-Control-Allow-Headers": { "schema": { "type": "string" } }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "mock",
          "requestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          },
          "passthroughBehavior": "when_no_match",
          "responses": {
            "default": { "statusCode": "200" }
          }
        }
      }
    },
    "/reservations": {
      "get": {
        "summary": "List Reservations",
        "description": "Retrieves a list of all reservations.",
        "responses": {
          "200": {
            "description": "List of reservations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "security": [{ "authorizer": [] }],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:423623856894:function:api_handler/invocations",
          "passthroughBehavior": "when_no_match",
          "type": "aws_proxy"
        }
      },
      "post": {
        "summary": "Add Reservation",
        "description": "Creates a new reservation for a table. Returns an error if the reservation overlaps an existing one or if the table does not exist.",
        "requestBody": {
          "description": "Payload containing reservation details.",
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ReservationRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reservation created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateReservationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Reservation overlaps an existing one or table does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "security": [{ "authorizer": [] }],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:423623856894:function:api_handler/invocations",
          "passthroughBehavior": "when_no_match",
          "type": "aws_proxy"
        }
      },
      "options": {
        "summary": "CORS support for /reservations",
        "responses": {
          "200": {
            "description": "CORS support.",
            "headers": {
              "Access-Control-Allow-Origin": { "schema": { "type": "string" } },
              "Access-Control-Allow-Methods": {
                "schema": { "type": "string" }
              },
              "Access-Control-Allow-Headers": { "schema": { "type": "string" } }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "mock",
          "requestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          },
          "passthroughBehavior": "when_no_match",
          "responses": {
            "default": { "statusCode": "200" }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Empty": {
        "title": "Empty Schema",
        "type": "object"
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": { "type": "string" }
        },
        "example": { "error": "Invalid request" }
      },
      "SignupRequest": {
        "type": "object",
        "required": ["firstName", "lastName", "email", "password"],
        "properties": {
          "firstName": { "type": "string", "example": "Bob" },
          "lastName": { "type": "string", "example": "Builder" },
          "email": {
            "type": "string",
            "format": "email",
            "example": "example@gmail.com"
          },
          "password": {
            "type": "string",
            "minLength": 12,
            "example": "A1b2C3$D4e5F6"
          }
        }
      },
      "SignupResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "User signed up successfully"
          }
        }
      },
      "SigninRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "example@gmail.com"
          },
          "password": {
            "type": "string",
            "minLength": 12,
            "example": "A1b2C3$D4e5F6"
          }
        }
      },
      "SigninResponse": {
        "type": "object",
        "properties": {
          "idToken": { "type": "string", "example": "eyJraWQiOiJ..." }
        }
      },
      "Table": {
        "type": "object",
        "required": ["id", "number", "places", "isVip"],
        "properties": {
          "id": { "type": "integer", "example": 16695 },
          "number": { "type": "integer", "example": 1 },
          "places": { "type": "integer", "example": 8 },
          "isVip": { "type": "boolean", "example": true },
          "minOrder": { "type": "integer", "example": 1000 }
        }
      },
      "CreateTableRequest": {
        "type": "object",
        "required": ["id", "number", "places", "isVip"],
        "properties": {
          "id": { "type": "integer", "example": 16695 },
          "number": { "type": "integer", "example": 1 },
          "places": { "type": "integer", "example": 8 },
          "isVip": { "type": "boolean", "example": true },
          "minOrder": { "type": "integer", "example": 1000 }
        }
      },
      "CreateTableResponse": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "example": 16695 }
        }
      },
      "TablesResponse": {
        "type": "object",
        "properties": {
          "tables": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Table" }
          }
        },
        "example": {
          "tables": [
            {
              "id": 16695,
              "number": 1,
              "places": 8,
              "isVip": true,
              "minOrder": 1000
            },
            {
              "id": 16696,
              "number": 2,
              "places": 6,
              "isVip": false,
              "minOrder": 500
            },
            {
              "id": 16697,
              "number": 3,
              "places": 10,
              "isVip": false,
              "minOrder": 800
            }
          ]
        }
      },
      "ReservationRequest": {
        "type": "object",
        "required": [
          "tableNumber",
          "clientName",
          "phoneNumber",
          "date",
          "slotTimeStart",
          "slotTimeEnd"
        ],
        "properties": {
          "tableNumber": { "type": "integer", "example": 16695 },
          "clientName": { "type": "string", "example": "John Doe" },
          "phoneNumber": { "type": "string", "example": "+123456789" },
          "date": {
            "type": "string",
            "format": "date",
            "example": "2025-04-01"
          },
          "slotTimeStart": {
            "type": "string",
            "pattern": "^\\d{2}:\\d{2}$",
            "example": "13:00"
          },
          "slotTimeEnd": {
            "type": "string",
            "pattern": "^\\d{2}:\\d{2}$",
            "example": "15:00"
          }
        }
      },
      "CreateReservationResponse": {
        "type": "object",
        "properties": {
          "reservationId": {
            "type": "string",
            "format": "uuid",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        }
      },
      "ReservationsResponse": {
        "type": "object",
        "properties": {
          "reservations": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ReservationRequest" }
          }
        },
        "example": {
          "reservations": [
            {
              "tableNumber": 16695,
              "clientName": "John Doe",
              "phoneNumber": "+123456789",
              "date": "2025-04-01",
              "slotTimeStart": "13:00",
              "slotTimeEnd": "15:00"
            }
          ]
        }
      }
    },
    "securitySchemes": {
      "authorizer": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "x-amazon-apigateway-authtype": "cognito_user_pools",
        "x-amazon-apigateway-authorizer": {
          "x-syndicate-cognito-userpool-names": ["${booking_userpool}"],
          "type": "cognito_user_pools"
        }
      }
    }
  },

  "x-syndicate-openapi-tags": {
    "run_id": "JAP-12",
    "run_type": "stm",
    "type": "user",
    "user_id": "fbd07dc0"
  }
}